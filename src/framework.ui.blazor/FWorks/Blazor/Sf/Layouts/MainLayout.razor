@inherits LayoutComponentBase
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper;
@inject IJSRuntime JsRuntime;
@inject FWorkAppState Service;

<FwToasts Timeout="50"></FwToasts>

<CascadingValue Value="@this">

    <FwMainPanel @ref="PanelMain">

        <FwHeader OnToggleClick="@OnToggleClick" OnRightToggleClick="@OnRightToggleClick"></FwHeader>

        <FwContent>

            <FwLeftPanel @ref="PanelLeft"></FwLeftPanel>

            <FwRightPanel Body="@Body" @ref="RightPaneObj"></FwRightPanel>

            <FwMobilePanel @ref="MobileSettingsObj"></FwMobilePanel>

        </FwContent>

    </FwMainPanel>

</CascadingValue>


@code
{

    public FwMainPanel PanelMain { get; set; }
    public FwLeftPanel PanelLeft { get; set; }
    public FwRightPanel RightPaneObj { get; set; }
    public FwMobilePanel MobileSettingsObj { get; set; }

    private void OnToggleClick()
    {
        this.PanelLeft.SideBar.Toggle();
        JsRuntime.InvokeAsync<string>("callResizeEvent");
    }

    public void OnRightToggleClick()
    {

        JsRuntime.InvokeAsync<Object>("mobileSideBarVisibility");
        this.MobileSettingsObj.MobilePreferences.Toggle();
        JsRuntime.InvokeAsync<Object>("mobileThemePersist");
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (UriHelper.Uri.IndexOf("material") > 0)
        {
            JsRuntime.Sf().EnableRipple(true);
        }
        else
        {
            JsRuntime.Sf().EnableRipple(false);
        }
        if (this.PanelMain.SpinnerObj.TransClass == null || this.PanelMain.SpinnerObj.TransClass == "sb-trans")
        {
            this.PanelMain.SpinnerObj.Hide();
            this.Service.Prop.HideSpinner = false;
            this.Service.Prop.RestricMouseEvents = false;
        }

    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        this.JsRuntime.Sf().LoadLocaleData("wwwroot/locale/pt.json")
            .LoadCldrData("wwwroot/locale/cldr-data/main/pt/numbers.json",
            "wwwroot/locale/cldr-data/main/pt/timeZoneNames.json",
            "wwwroot/locale/cldr-data/main/pt/ca-gregorian.json",
            "wwwroot/locale/cldr-data/main/pt/currencies.json",
            "wwwroot/locale/cldr-data/supplemental/numberingSystems.json")
            .SetCulture("pt").SetCurrencyCode("BRL");
        Service.Notify += OnNotify;

    }
    protected override bool ShouldRender()
    {
        return true;
    }
    public async Task OnNotify(NotifyProperties prop)
    {
        await InvokeAsync(() =>
        {
            this.PanelMain.SpinnerObj.Hide();
            this.Service.Prop.HideSpinner = false;
            this.Service.Prop.RestricMouseEvents = false;

        });
    }


    public void Dispose()
    {
        Service.Notify -= OnNotify;
    }







}
