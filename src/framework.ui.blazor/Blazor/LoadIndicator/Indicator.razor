@namespace Orion.Framework.Ui.Blazor.Components
@implements System.IDisposable
@inject ILoadingService IndicatorService

@if (_currentTask?.Exception != null && ErrorContent != null)
{
    @ErrorContent(_currentTask)
}
else if (_currentTask != null)
{
    @InProgressTemplate(_currentTask)
}
@if (_childContentShouldBeInTree)
{
    <div style="@_childContentCss">
        @ChildContent
    </div>
}

@code {
    private const string CSS_DISPLAY_NONE = "display: none;";

    private const string CSS_VISIBILITY_HIDDEN = "visibility: hidden;";

    [Parameter] public RenderFragment<ITaskStatus> InProgressTemplate { get; set; }

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public RenderFragment<ITaskStatus> ErrorContent { get; set; }

    [Parameter] public string IndicatorContext { get; set; }

    [Parameter] public Type TemplateType { get; set; }

    [Parameter] public IndicatorChildContentHideModes? ChildContentHideMode { get; set; }

    private ITaskStatus _currentTask { get; set; }

    private IndicatorChildContentHideModes _childContentHideMode => ChildContentHideMode ?? IndicatorService.Options.ChildContentHideMode;

    private bool _childContentShouldBeShown => (_currentTask?.Exception != null && ErrorContent == null) || _currentTask == null;

    private bool _childContentShouldBeInTree
    {
        get
        {
            if (_childContentShouldBeShown || _childContentHideMode != IndicatorChildContentHideModes.RemoveFromTree)
                return true;
            else
                return false;
        }
    }

    private string _childContentCss
    {
        get
        {
            if (_childContentShouldBeShown || _childContentHideMode == IndicatorChildContentHideModes.RemoveFromTree)
                return string.Empty;
            else if (_childContentHideMode == IndicatorChildContentHideModes.CssDisplayNone)
                return CSS_DISPLAY_NONE;
            else if (_childContentHideMode == IndicatorChildContentHideModes.CssVisibilityHidden)
                return CSS_VISIBILITY_HIDDEN;
            else // should be impossible to occur
                return string.Empty;
        }
    }

    private static readonly Type DefaultInProgressTemplateType = typeof(DefaultTemplate);

    // https://stackoverflow.com/questions/50188680/add-load-components-dynamically
    RenderFragment<ITaskStatus> InProgressContentCreator() => taskStatus =>
    {
        return new RenderFragment((builder) =>
        {
            builder.OpenComponent(0, TemplateType ?? IndicatorService.Options.IndicatorTemplate ?? DefaultInProgressTemplateType);
            builder.AddAttribute(0, nameof(LoadingIndicatorTemplateBase.CurrentTask), taskStatus);
            builder.CloseComponent();
        });
    };

    private async Task HandleTaskProgressChangedEvent(ITaskStatus task)
    {
        _currentTask = task;
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        IndicatorService.SubscribeToTaskProgressChanged(IndicatorContext, HandleTaskProgressChangedEvent);
        if (InProgressTemplate == null)
            InProgressTemplate = InProgressContentCreator();

        base.OnInitialized();
    }

    public void Dispose()
    {
        IndicatorService.UnsubscribeFromTaskProgressChanged(IndicatorContext, HandleTaskProgressChangedEvent);
    }
}

